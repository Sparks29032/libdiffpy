import os

Import('env')

# Environment for building unit test driver
env_test = env.Clone(tools=['default', 'cxxtest'], CXXTEST_SUFFIX='.hpp')
lib_dir = Dir('../').abspath
env_test.PrependUnique(LIBS='libdiffpy', LIBPATH=lib_dir)
env_test.PrependENVPath('LD_LIBRARY_PATH', lib_dir)
env_test.AppendUnique(CPPPATH='.')

# Targets --------------------------------------------------------------------

# alltests -- the unit test driver
test_sources = []

# add all unit test modules when variable tests was not set.
if env_test.get('tests') is None:
    test_sources += Glob('Test*.hpp')
else:
    test_sources = Split(env_test['tests']) 

# special builder for tests_dir.cpp
def build_tests_dir(target, source, env):
    tdfullpath = source[0].abspath
    flds = {'tests_dir' : os.path.dirname(tdfullpath)}
    tests_dir_code = open(tdfullpath).read() % flds
    open(str(target[0]), 'w').write(tests_dir_code)
    return None

env_test.Append(BUILDERS={'Build_tests_dir_cpp' :
        Builder(action=build_tests_dir)})
tdcpp = env_test.Build_tests_dir_cpp(['tests_dir.cpp'],
        [env_test.File('tests_dir.tpl').srcnode(),
         env_test.Value(Dir('.').srcnode().abspath)])
test_sources += tdcpp

alltests = env_test.CxxTest('alltests', test_sources)

# test -- alias for executing unit tests.
test = env_test.Alias('test', alltests, alltests[0].abspath)
AlwaysBuild(test)

# vim: ft=python
