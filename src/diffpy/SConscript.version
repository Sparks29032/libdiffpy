import os
import re

Import('env')

def gitinfo():
    from subprocess import Popen, PIPE
    kw = dict(stdout=PIPE)
    proc = Popen(['git', 'describe'], **kw)
    desc = proc.stdout.read()
    proc = Popen(['git', 'log', '-1', '--format=%H %ai'], **kw)
    glog = proc.stdout.read()
    rv = {}
    rv['version'] = '-'.join(desc.strip().split('-')[:2])
    rv['commit'], rv['date'] = glog.strip().split(None, 1)
    mx = re.search(r'(?m)^(\d+)\.(\d+)(?:-(\d+))?', rv['version'])
    rv['major'] = int(mx.group(1))
    rv['minor'] = int(mx.group(2))
    rv['number'] = mx.group(3) and int(mx.group(3)) or 0
    return rv


def parsemajorminor(hcode):
    'Extract major and minor version from a C++ header file.'
    mx = re.search(r'(?m)^#define *DIFFPY_VERSION_MAJOR *(\d+)', hcode)
    major = int(mx.group(1))
    mx = re.search(r'(?m)^#define *DIFFPY_VERSION_MINOR *(\d+)', hcode)
    minor = int(mx.group(1))
    return (major, minor)


def build_VersionCode(target, source, env):
    import string
    tplcode = source[0].get_contents()
    numversion = (1000000 * ginfo['major'] +
            1000 * ginfo['minor'] + ginfo['number'])
    flds = {
        'DIFFPY_VERSION' : numversion,
        'DIFFPY_VERSION_MAJOR' : ginfo['major'],
        'DIFFPY_VERSION_MINOR' : ginfo['minor'],
        'DIFFPY_VERSION_STR' : ginfo['version'],
        'DIFFPY_VERSION_DATE' : ginfo['date'],
        'DIFFPY_GIT_SHA' : ginfo['commit'],
        'DIFFPY_HAS_OBJCRYST' : int(env['has_objcryst']),
    }
    versiontemplate = string.Template(tplcode)
    versioncode = versiontemplate.safe_substitute(flds)
    open(target[0].path, 'w').write(versioncode)
    return None

env.Append(BUILDERS={'BuildVersionCode' :
        Builder(action=build_VersionCode, suffix='.hpp', src_suffix='.tpl')})

# Targets --------------------------------------------------------------------

vhpp = File('version.hpp')

# If version.hpp exists do not use git
if os.path.isfile(str(vhpp.srcnode())):
    majorminor = parsemajorminor(vhpp.srcnode().get_contents())
else:
    vtpl = File('version.tpl')
    ginfo = gitinfo()
    vhpp, = env.BuildVersionCode(['version.hpp'], vtpl)
    env.Depends(vhpp, env.Value(ginfo['version'] + ginfo['commit']))
    env.Depends(vhpp, env.Value(env['has_objcryst']))
    majorminor = (ginfo['major'], ginfo['minor'])

env['lib_includes'] += [vhpp]
env['majorminor'] = majorminor

# vim: ft=python
