import os
import re
import string

Import('env')


def parsemajorminor(hcode):
    'Extract major and minor version from a C++ header file.'
    mx = re.search(r'(?m)^#define *DIFFPY_VERSION_MAJOR *(\d+)', hcode)
    major = int(mx.group(1))
    mx = re.search(r'(?m)^#define *DIFFPY_VERSION_MINOR *(\d+)', hcode)
    minor = int(mx.group(1))
    return (major, minor)


def build_VersionCode(target, source, env):
    tplcode = source[0].get_contents()
    numversion = (1000000 * ginfo['major'] +
            1000 * ginfo['minor'] + ginfo['number'])
    if ginfo['prerelease']:
        numversion = "(-500 + %i)" % numversion
    flds = {
        'DIFFPY_VERSION' : numversion,
        'DIFFPY_VERSION_MAJOR' : ginfo['major'],
        'DIFFPY_VERSION_MINOR' : ginfo['minor'],
        'DIFFPY_VERSION_STR' : ginfo['version'],
        'DIFFPY_VERSION_DATE' : ginfo['date'],
        'DIFFPY_GIT_SHA' : ginfo['commit'],
    }
    versiontemplate = string.Template(tplcode)
    versioncode = versiontemplate.safe_substitute(flds)
    open(target[0].path, 'w').write(versioncode)
    return None

env.Append(BUILDERS={'BuildVersionCode' :
        Builder(action=build_VersionCode, suffix='.hpp', src_suffix='.tpl')})


def build_FeaturesCode(target, source, env):
    tplcode = source[0].get_contents()
    flds = {
        'DIFFPY_HAS_OBJCRYST' : int(env['has_objcryst']),
    }
    codetemplate = string.Template(tplcode)
    codetext = codetemplate.safe_substitute(flds)
    open(target[0].path, 'w').write(codetext)
    return None

env.Append(BUILDERS={'BuildFeaturesCode' :
        Builder(action=build_FeaturesCode, suffix='.hpp', src_suffix='.tpl')})

# Targets --------------------------------------------------------------------

vhpp = File('version.hpp')

# If version.hpp exists do not use git
if os.path.isfile(str(vhpp.srcnode())):
    majorminor = parsemajorminor(vhpp.srcnode().get_contents())
else:
    from libdiffpybuildutils import gitinfo
    vtpl = File('version.tpl')
    ginfo = gitinfo()
    vhpp, = env.BuildVersionCode(['version.hpp'], vtpl)
    env.Depends(vhpp, env.Value(ginfo['version'] + ginfo['commit']))
    majorminor = (ginfo['major'], ginfo['minor'])

fhpp, = env.BuildFeaturesCode(['features.tpl'])
env.Depends(fhpp, env.Value(env['has_objcryst']))

env['lib_includes'] += [vhpp, fhpp]
env['majorminor'] = majorminor

# vim: ft=python
