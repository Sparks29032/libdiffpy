import os

# Do nothing if version.hpp already exists in the source tree.

version_hpp = str(File('version.hpp').srcnode())
if os.path.isfile(version_hpp):
    Return()

# Otherwise build version.hpp from the svn data.

Import('env')
Import('DIFFPY_VERSION_STR')

version_sources = ['version.tpl']
svnentries = env.File('#/src/.svn/entries').srcnode()
srcdir = os.path.dirname(os.path.dirname(str(svnentries)))
svnrev = (os.path.isfile(str(svnentries)) and
        os.popen('svnversion -c %s' % srcdir).read().strip().split(':')[-1])

def build_VersionCode(target, source, env):
    import re
    import string
    flds = {
        'DIFFPY_VERSION' : 0,
        'DIFFPY_VERSION_STR' : DIFFPY_VERSION_STR,
        'DIFFPY_VERSION_DATE' : '2009-11-23 00:00:00Z',
    }
    major, minor = map(int, DIFFPY_VERSION_STR.split("."))
    rev = svnrev and int(svnrev.rstrip('MS')) or 0
    flds['DIFFPY_VERSION'] = 10000000 * major + 100000 * minor + rev
    if rev:
        flds['DIFFPY_VERSION_STR'] += "-r" + svnrev.rstrip('S')
        cmd = 'TZ=0 svn info -r %i .' % rev
        svninfo = os.popen(cmd).read()
        mx = re.search('^Last Changed Date: (\S+ \S+)', svninfo, re.M)
        if mx:  flds['DIFFPY_VERSION_DATE'] = mx.group(1) + "Z"
    templatecode = open(str(source[0])).read()
    versiontemplate = string.Template(templatecode)
    versioncode = versiontemplate.safe_substitute(flds)
    open(str(target[0]), 'w').write(versioncode)
    return None

env.Append(BUILDERS={'BuildVersionCode' :
        Builder(action=build_VersionCode, suffix='.hpp', src_suffix='.tpl')})

# Targets --------------------------------------------------------------------

ver = env.BuildVersionCode(['version.hpp'], version_sources)
env.Depends(ver, env.Value(DIFFPY_VERSION_STR))
if os.path.isfile(str(svnentries)):  env.Depends(ver, svnentries)

env['lib_includes'] += ver

# vim: ft=python
