import os

# copy system environment variables related to compilation
DefaultEnvironment(ENV={
        'PATH' : os.environ['PATH'],
        'PYTHONPATH' : os.environ.get('PYTHONPATH', ''),
        'CPATH' : os.environ.get('CPATH', ''),
        'LIBRARY_PATH' : os.environ.get('LIBRARY_PATH', ''),
        'LD_LIBRARY_PATH' : os.environ.get('LD_LIBRARY_PATH', ''),
    }
)


# Create construction environment
env = DefaultEnvironment().Clone()

# Variables definitions below work only with 0.98 or later.
env.EnsureSConsVersion(0, 98)

# Customizable compile variables
vars = Variables('sconsvars.py')

vars.Add('tests', 'Custom list of unit test sources', None)
vars.Add(EnumVariable('build',
    'compiler settings', 'debug',
    allowed_values=('debug', 'fast')))
vars.Add(BoolVariable('profile',
    'build with profiling information', False))
vars.Add(PathVariable('prefix',
    'installation prefix directory', '/usr/local'))
vars.Update(env)
vars.Add(PathVariable('libdir',
    'object code library directory [prefix/lib]',
    env['prefix'] + '/lib'))
vars.Add(PathVariable('includedir',
    'installation directory for C++ header files [prefix/include]',
    env['prefix'] + '/include'))
vars.Update(env)
env.Help(vars.GenerateHelpText(env))

# Configure external libraries.
env.ParseConfig("python-config --includes")
env.ParseConfig("python-config --ldflags")
env.ParseConfig("pyobjcryst-config --cflags --ldflags")
env.ParseConfig("gsl-config --cflags --libs")
env.AppendUnique(LIBS='boost_python')

# Configure build variants
if env['build'] == 'debug':
    env.Append(CCFLAGS='-g')
elif env['build'] == 'fast':
    env.AppendUnique(CCFLAGS=['-O3', '-ffast-math'])
    env.AppendUnique(CPPDEFINES='NDEBUG')

if env['profile']:
    env.AppendUnique(CCFLAGS='-pg')
    env.AppendUnique(LINKFLAGS='-pg')

env.AppendUnique(CCFLAGS='-Wall')
env.PrependUnique(CPPPATH='#/')

# Define lists for storing library source and include files.
env['lib_includes'] = []
env['lib_sources'] = []

# Subsidiary SConscripts -----------------------------------------------------

Export('env')

# This SConscript updates lib_includes and lib_sources.
SConscript('diffpy/SConscript')

# Define targets related to testing.  Do so only when testing is requested.
# This enables library build on machines without cxxtest.
if 'test' in COMMAND_LINE_TARGETS:
    SConscript('tests/SConscript')

# Top Level Targets ----------------------------------------------------------

# lib -- shared library object
libsrreal = env.SharedLibrary('libsrreal', env['lib_sources'])
Alias('lib', libsrreal)

# Installation targets.

prefix = env['prefix']

# install-lib
libdir = env.get('libdir', os.path.join(prefix, 'lib'))
Alias('install-lib', Install(libdir, libsrreal))

# install-includes
includedir = env.get('includedir', os.path.join(env['prefix'], 'include'))
get_target_path = lambda f : os.path.join(includedir, f.path)
include_targets = map(get_target_path, env['lib_includes'])

Alias('install-include', InstallAs(include_targets, env['lib_includes']))

# install
Alias('install', ['install-include', 'install-lib'])

# vim: ft=python
