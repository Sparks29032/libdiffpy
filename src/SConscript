import os

Import('env')

# Build environment configuration --------------------------------------------

# The directory of this SConscript should be searched first for any headers.
env.PrependUnique(CPPPATH=Dir('.'))

# Insert LIBRARY_PATH explicitly because some compilers
# ignore it in the system environemnt.
env.PrependUnique(LIBPATH=env['ENV'].get('LIBRARY_PATH', '').split(':'))

# Use Intel C++ compiler when it is available
icpc = env.WhereIs('icpc')
if icpc:
    env.Tool('intelc', topdir=icpc[:icpc.rfind('/bin')])

# Declare external libraries.
env.ParseConfig("python-config --includes")
env.ParseConfig("python-config --ldflags")
env.ParseConfig("gsl-config --cflags --libs")
# configure version specific options.
if not (GetOption('clean') or env.GetOption('help')):
    SConscript('SConscript.configure')

# Compiler specific options
if icpc:
    # options for Intel C++ compiler on hpc dev-intel07
    env.AppendUnique(CCFLAGS=['-w1', '-fp-model', 'precise'])
    env.PrependUnique(LIBS=['imf'])
    fast_optimflags = ['-fast', '-no-ipo']
else:
    # g++ options
    env.AppendUnique(CCFLAGS=['-Wall'])
    fast_optimflags = ['-ffast-math']

# Configure build variants
if env['build'] == 'debug':
    env.Append(CCFLAGS='-g')
elif env['build'] == 'fast':
    env.AppendUnique(CCFLAGS=['-O3'] + fast_optimflags)
    env.AppendUnique(CPPDEFINES=['NDEBUG'])
    env.AppendUnique(LINKFLAGS='-s')

if env['profile']:
    env.AppendUnique(CCFLAGS='-pg')
    env.AppendUnique(LINKFLAGS='-pg')

# Define lists for storing library source and include files.
env['lib_includes'] = []
env['lib_sources'] = []

# Subsidiary SConscripts -----------------------------------------------------

# This SConscript updates lib_includes and lib_sources.
SConscript('diffpy/SConscript')

# Top Level Targets ----------------------------------------------------------

# lib -- shared library object
libdiffpy = env.SharedLibrary('libdiffpy', env['lib_sources'])
Export('libdiffpy')
Alias('lib', libdiffpy)

# Define targets related to testing.  Do so only when testing is requested.
# This enables library build on machines without cxxtest.
if set(('test', 'alltests')).intersection(COMMAND_LINE_TARGETS):
    SConscript('tests/SConscript')

# Installation targets.

prefix = env['prefix']

# install-lib
libdir = env.get('libdir', os.path.join(prefix, 'lib'))
Alias('install-lib', Install(libdir, libdiffpy))

# install-includes
includedir = env.get('includedir', os.path.join(env['prefix'], 'include'))
srcdir = Dir('.').path
def get_target_path(f):
    cutleft = len(srcdir) + 1
    frelsrc = f.path[cutleft:]
    rv = os.path.join(includedir, frelsrc)
    return rv
include_targets = map(get_target_path, env['lib_includes'])

Alias('install-include', InstallAs(include_targets, env['lib_includes']))

# install
Alias('install', ['install-include', 'install-lib'])

# vim: ft=python
